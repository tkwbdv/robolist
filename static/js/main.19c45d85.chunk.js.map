{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/RadioFilter.js","components/UserFilter.js","components/AllUsersButton.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","userId","title","completed","deleteChange","id","toggleCompleted","react_default","a","createElement","className","src","concat","alt","type","checked","onChange","onClick","CardList","todos","cardsArray","map","todo","index","components_Card","key","SearchBox","searchChange","placeholder","Scroll","props","style","overflowY","border","height","children","RadioFilter","changeRadio","name","value","defaultChecked","UserFilter","userFilterChange","userAvatars","userArray","AllUsersButton","userFilter","ShowAllUsersHandler","userTodos","length","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateUserArray","reduce","acc","push","onSearchChange","event","setState","searchfield","target","state","forEach","Number","splice","findIndex","onRadioChange","radio","_this2","fetch","then","response","json","users","_this$state","filteredTodos","filter","toLowerCase","includes","components_RadioFilter","components_UserFilter","components_AllUsersButton","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19c45d85.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ userId, title, completed, deleteChange, id, toggleCompleted }) => { /* props is the passed argument but we destructure it. we grab name, email, id from props. dont have to write props.name etc. */\r\n  return (completed ? (\r\n    <div>\r\n      <label>\r\n        <div className=\"flex justify-between bg-dark-green br3 pa1 ma2 bw2 shadow-5 bg-animate hover-bg-blue hover-white pointer\">\r\n          <span className=\"flex items-center\">\r\n            <img className=\"mr2 h2\" src={`https://robohash.org/${userId}.png?size=50x50`} alt=\"todos\"></img>\r\n            <input className=\"mr2 checkbox pointer\" type=\"checkbox\" checked={completed} onChange={toggleCompleted} id={id} />\r\n            <h2>{title}</h2>\r\n          </span>\r\n          <span className=\"flex\">\r\n            <button className=\"delete-btn\" onClick={deleteChange} id={id}>delete</button>\r\n          </span>\r\n        </div>\r\n      </label>\r\n    </div>\r\n  ) : (\r\n      <div>\r\n        <label>\r\n          <div className=\"flex justify-between bg-light-green br3 pa1 ma2 bw2 shadow-5 bg-animate hover-bg-blue hover-white pointer\">\r\n            <span className=\"flex items-center\">\r\n              <img className=\"mr2 h2\" src={`https://robohash.org/${userId}.png?size=50x50`} alt=\"todos\"></img>\r\n              <input className=\"mr2 checkbox pointer\" type=\"checkbox\" checked={completed} onChange={toggleCompleted} id={id} />\r\n              <h2>{title}</h2>\r\n            </span>\r\n            <span className=\"flex\">\r\n              <button className=\"delete-btn\" onClick={deleteChange} id={id}>delete</button>\r\n            </span>\r\n          </div>\r\n        </label>\r\n      </div>\r\n    )\r\n\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ todos, deleteChange, toggleCompleted }) => {\r\n  const cardsArray = todos.map((todo, index) => {\r\n    return (\r\n      <Card\r\n        key={todos[index].id}\r\n        id={todos[index].id}\r\n        userId={todos[index].userId}\r\n        title={todos[index].title}\r\n        completed={todos[index].completed}\r\n        deleteChange={deleteChange}\r\n        toggleCompleted={toggleCompleted}\r\n      />\r\n    );\r\n    //have to give Card a unique \"Key\" prop when we loop which does not change (index is not good here because if the array items get moved the index changes). React can uniquely identify each card if it needs to change the DOM\r\n  })\r\n\r\n  return (\r\n    <div className=\"list w-90\">\r\n      {cardsArray}  {/*we could replace cardsArray directly with the code written above because it is just a js variable we declared. I leave it as is for readibility */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robo-todos\"\r\n        onChange={searchChange}\r\n      />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {  // props contains children even if we dont explicitly pass a prop called like that\r\n  return (\r\n    <div style={{ overflowY: \"scroll\", border: \"5px solid black\", height: \"1000px\" }}> {/* {{}} because we are in JSX. {} means JS expression, second {} JS object.*/}\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nconst RadioFilter = ({ changeRadio }) => {\r\n  return (\r\n    <div className=\"flex radio\">\r\n      <label>\r\n        <input className=\"ma2\" type=\"radio\" name=\"filter\" value=\"all\" onClick={changeRadio} defaultChecked />\r\n        All Tasks\r\n    </label>\r\n      <label>\r\n        <input className=\"ma2\" type=\"radio\" name=\"filter\" value=\"done\" onClick={changeRadio} />\r\n        Done\r\n    </label>\r\n      <label>\r\n        <input className=\"ma2\" type=\"radio\" name=\"filter\" value=\"todo\" onClick={changeRadio} />\r\n        Open\r\n    </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RadioFilter;","import React from \"react\";\r\n\r\n\r\n\r\n\r\nconst UserFilter = ({ userFilterChange, todos, userArray }) => {\r\n  // userArray(todos);\r\n\r\n  const userAvatars = userArray(todos).map((userId) => {\r\n    //Generate array with matching userimages\r\n    return (\r\n      <span key={userId} onClick={userFilterChange}>\r\n        <img src={`https://robohash.org/${userId}.png?size=50x50`} alt=\"todos\" className=\"pointer\" id={userId} />\r\n      </span>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      {userAvatars}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserFilter;","import React from \"react\"\r\n\r\nconst AllUsersButton = ({ userFilter, ShowAllUsersHandler, userTodos }) => {\r\n  if (userFilter.length === userTodos.length) {\r\n    return <div></div>\r\n  }\r\n  return (\r\n    <div>\r\n      <button className=\"f6 br2 ph3 pv2 white bg-dark-green\" onClick={ShowAllUsersHandler}>All Users</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AllUsersButton;","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\"\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport RadioFilter from \"../components/RadioFilter\";\r\nimport UserFilter from \"../components/UserFilter\";\r\nimport AllUsersButton from \"../components/AllUsersButton\";\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {  // State: A piece of data that describes our app. Components with a state are called \"smart\". smart components use the class syntax, because we need \"this\". As soon as a State changes the App gets rerendered\r\n      todos: [],\r\n      searchfield: \"\",\r\n      radio: \"\",\r\n      userFilter: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/todos\") // load users from website after component did mount -> update state -> rerender\r\n      .then(response => response.json())\r\n      .then(users => {\r\n        this.setState({ todos: users })\r\n        this.setState({ userFilter: this.generateUserArray(this.state.todos) });\r\n      });\r\n\r\n  }\r\n\r\n  generateUserArray = (todos) => {\r\n    return todos.reduce((acc, todo) => {\r\n      //Generate Array of present userIds in filtered todos\r\n      if (todo.userId === acc[acc.length - 1]) {\r\n        return acc;\r\n      } else {\r\n        acc.push(todo.userId);\r\n        return acc;\r\n      }\r\n    }, [])\r\n  }\r\n\r\n  onSearchChange = (event) => { // Arrow Function is a must here, otherwise \"this\" will not refer to \"App\" but to the onChange property\r\n    this.setState({ searchfield: event.target.value });\r\n  }\r\n\r\n  deleteChange = event => {\r\n    const { todos } = this.state;\r\n    todos.forEach((todo, index) => {\r\n      if (todo.id === Number(event.target.id)) {\r\n        todos.splice(index, 1);\r\n        this.setState({ todos: todos });  // state change forces rerender of CardList\r\n      }\r\n    })\r\n  }\r\n\r\n  toggleCompleted = event => {\r\n    const index = this.state.todos.findIndex(todo => todo.id === Number(event.target.id));\r\n    const { todos } = this.state;\r\n    todos[index].completed = event.target.checked;\r\n    this.setState({ todos: todos });\r\n  }\r\n\r\n  onRadioChange = event => {\r\n    this.setState({ radio: event.target.value });\r\n  }\r\n\r\n  userFilterChange = event => {\r\n    this.setState({ userFilter: [Number(event.target.id)] });\r\n  }\r\n\r\n  ShowAllUsersHandler = event => {\r\n    this.setState({ userFilter: this.generateUserArray(this.state.todos) });\r\n  }\r\n\r\n  render() {\r\n    const { todos, searchfield, radio, userFilter } = this.state;\r\n\r\n    const filteredTodos = todos.filter(todo => {\r\n      const filter = todo.title.toLowerCase().includes(searchfield.toLowerCase());  // filter is the searchfield input\r\n\r\n      switch (radio) {  // filter by radio buttons\r\n        case \"done\":\r\n          return filter && todo.completed && userFilter.includes(todo.userId)\r\n        case \"todo\":\r\n          return filter && !todo.completed && userFilter.includes(todo.userId)\r\n        default:\r\n          return filter && userFilter.includes(todo.userId)\r\n      }\r\n    });\r\n\r\n\r\n\r\n    return !todos.length ?\r\n      <h1 className=\"tc f1\">Loading...</h1> :\r\n      (\r\n        <div className=\"tc\" >\r\n\r\n          <h1 className=\"f1\">RoboList</h1>\r\n\r\n          <div className=\"flex items-center justify-between ma2\">\r\n            <div className=\"RadioFilter\">\r\n              <RadioFilter changeRadio={this.onRadioChange} />\r\n            </div>\r\n            <div className=\"h3 flex items-center\">\r\n              <UserFilter todos={filteredTodos} userFilterChange={this.userFilterChange} userArray={this.generateUserArray} />\r\n              <AllUsersButton userTodos={this.generateUserArray(this.state.todos)} ShowAllUsersHandler={this.ShowAllUsersHandler} userFilter={this.state.userFilter} />\r\n            </div>\r\n            <div className=\"searchBox\">\r\n              <SearchBox searchChange={this.onSearchChange} />\r\n            </div>\r\n          </div>\r\n\r\n          <Scroll>\r\n            <CardList todos={filteredTodos} deleteChange={this.deleteChange} toggleCompleted={this.toggleCompleted} />\r\n          </Scroll>\r\n\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./containers/App.js\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"tachyons\";  //predefined classes so we dont have to write a css file for every component\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root')); // Mounting: we are replacing \"root\" with our App\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}